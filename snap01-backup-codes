<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1, viewport-fit=cover" />
  <title>SNAP</title>

  <!-- Google Fonts -->
  <link href="https://fonts.googleapis.com/css2?family=Open+Sans&family=Poppins:wght@600&display=swap" rel="stylesheet" />

  <style>
    * {
      box-sizing: border-box;
    }
    html, body {
      margin: 0;
      height: 100%;
      font-family: 'Open Sans', sans-serif;
      background: #000;
      overflow: hidden;
      user-select: none;
    }

    body {
      display: flex;
      flex-direction: column;
    }

    header {
      height: 60px;
      background: #ffffff;
      box-shadow: 0 2px 6px rgba(0,0,0,0.05);
      display: flex;
      align-items: center;
      justify-content: space-between;
      padding: 0 20px;
      font-family: 'Poppins', sans-serif;
      font-weight: 700;
      font-size: 1.3rem;
      color: #007aff;
      flex-shrink: 0;
      z-index: 10;
      position: relative;
    }

    .photo-count {
      font-size: 0.9rem;
      color: #333;
      font-family: 'Open Sans', sans-serif;
    }

    main {
      flex-grow: 1;
      position: relative;
      background: black;
      overflow: hidden;
    }

    .video-container {
      position: absolute;
      top: 0;
      bottom: 0;
      width: 100%;
      max-width: 100%;
      background: black;
      z-index: 1;
    }

    video {
      width: 100%;
      height: 100%;
      object-fit: cover;
      display: block;
    }

    .level-container {
      position: absolute;
      top: 50%;
      left: 50%;
      width: 80%;
      height: 2px;
      background: rgba(255, 255, 255, 0.4);
      transform: translate(-50%, -50%);
      z-index: 10;
      pointer-events: none;
    }

    .level-indicator {
      position: absolute;
      width: 14px;
      height: 14px;
      background: white;
      border: 2px solid #00ff99;
      border-radius: 50%;
      pointer-events: none;
      transform: translate(-50%, -50%);
      box-shadow: 0 0 8px rgba(0,255,153,0.3);
    }

    footer {
      position: fixed;
      bottom: 0;
      left: 0;
      right: 0;
      height: 120px;
      background: #ffffff;
      box-shadow: 0 -2px 6px rgba(0,0,0,0.05);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 50;
    }

    #capture-btn {
      width: 72px;
      height: 72px;
      background: linear-gradient(145deg, #007aff, #0051a8);
      border: none;
      border-radius: 50%;
      cursor: pointer;
      transition: background 0.3s ease, transform 0.1s ease;
      box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    }

    #capture-btn.red {
      background: linear-gradient(145deg, #ff3b30, #b3201c);
    }

    #capture-btn:hover {
      transform: translateY(-3px);
      box-shadow: 0 6px 16px rgba(0,0,0,0.2);
    }

    #capture-btn:active {
      transform: translateY(0);
      box-shadow: 0 3px 8px rgba(0,0,0,0.15);
    }

    #error-message {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      color: #d32f2f;
      font-weight: 600;
      background: rgba(255,255,255,0.9);
      padding: 12px 24px;
      border-radius: 12px;
      text-align: center;
      max-width: 90%;
      display: none;
      z-index: 20;
      box-shadow: 0 4px 12px rgba(0,0,0,0.1);
    }
  </style>
</head>
<body>

  <header>
    <div>SNAP</div>
    <div class="photo-count">Photos: <span id="photoCounter">0</span>/4</div>
  </header>

  <main>
    <div class="video-container" id="videoContainer">
      <video id="video" autoplay playsinline></video>

      <div class="level-container" id="levelContainer">
        <div class="level-indicator" id="levelIndicator"></div>
      </div>
    </div>

    <p id="error-message" role="alert" aria-live="assertive"></p>
  </main>

  <footer>
    <button id="capture-btn" aria-label="Take photo"></button>
  </footer>

  <script>
    const video = document.getElementById('video');
    const captureBtn = document.getElementById('capture-btn');
    const levelIndicator = document.getElementById('levelIndicator');
    const levelContainer = document.getElementById('levelContainer');
    const errorMessage = document.getElementById('error-message');
    const videoContainer = document.getElementById('videoContainer');
    const photoCounterText = document.getElementById('photoCounter');

    let isLandscape = false;
    let photoCount = 0;

    function updateLevelContainer() {
      if (isLandscape) {
        levelContainer.style.width = '2px';
        levelContainer.style.height = '80%';
        levelContainer.style.top = '50%';
        levelContainer.style.left = '50%';
        levelContainer.style.transform = 'translate(-50%, -50%)';
      } else {
        levelContainer.style.width = '80%';
        levelContainer.style.height = '2px';
        levelContainer.style.top = '50%';
        levelContainer.style.left = '50%';
        levelContainer.style.transform = 'translate(-50%, -50%)';
      }
    }

    function handleOrientation(event) {
      const gamma = event.gamma;
      const beta = event.beta;

      if (gamma === null || beta === null) return;

      isLandscape = Math.abs(gamma) > Math.abs(beta);
      updateLevelContainer();

      const containerRect = levelContainer.getBoundingClientRect();
      const indicatorSize = levelIndicator.offsetWidth;

      if (isLandscape) {
        const containerHeight = containerRect.height;
        const clampedBeta = Math.max(-30, Math.min(30, beta));
        const maxOffset = (containerHeight / 2) - (indicatorSize / 2);
        const offset = (clampedBeta / 30) * maxOffset;
        levelIndicator.style.top = `calc(50% + ${offset}px)`;
        levelIndicator.style.left = '50%';

        if (Math.abs(beta) < 2) {
          levelIndicator.style.background = '#00ff99';
        } else {
          levelIndicator.style.background = 'white';
        }

      } else {
        const containerWidth = containerRect.width;
        const clampedGamma = Math.max(-30, Math.min(30, gamma));
        const maxOffset = (containerWidth / 2) - (indicatorSize / 2);
        const offset = (clampedGamma / 30) * maxOffset;
        levelIndicator.style.left = `calc(50% + ${offset}px)`;
        levelIndicator.style.top = '50%';

        if (Math.abs(gamma) < 2) {
          levelIndicator.style.background = '#00ff99';
        } else {
          levelIndicator.style.background = 'white';
        }
      }
    }

    async function startCamera() {
      try {
        const constraints = {
          video: {
            facingMode: { exact: "environment" },
            width: { ideal: 1920 },
            height: { ideal: 1080 }
          },
          audio: false
        };

        const stream = await navigator.mediaDevices.getUserMedia(constraints);
        video.srcObject = stream;

        video.onloadedmetadata = () => {
          const settings = stream.getVideoTracks()[0].getSettings();
          const { width, height } = settings;

          if (width && height) {
            const aspectRatio = height / width;
            videoContainer.style.height = `${videoContainer.clientWidth * aspectRatio}px`;
          } else {
            videoContainer.style.height = `${videoContainer.clientWidth * 3 / 4}px`;
          }
        };

        errorMessage.style.display = 'none';

        if (window.DeviceOrientationEvent) {
          window.addEventListener('deviceorientation', handleOrientation);
        }
      } catch (err) {
        console.error('Camera error:', err);
        errorMessage.textContent = 'Camera access denied or unavailable.';
        errorMessage.style.display = 'block';
      }
    }

    captureBtn.addEventListener('click', () => {
      const canvas = document.createElement('canvas');
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      const ctx = canvas.getContext('2d');
      ctx.drawImage(video, 0, 0, canvas.width, canvas.height);

      const imageData = canvas.toDataURL('image/png');
      localStorage.setItem(`snap-photo-${photoCount + 1}`, imageData);

      photoCount++;
      photoCounterText.textContent = photoCount;

      if (photoCount === 3) {
        captureBtn.classList.add('red');
      }

      if (photoCount >= 4) {
        window.location.href = "editor.html"; // replace with your editor page later
      }
    });

    startCamera();

    window.addEventListener('resize', () => {
      if (video.srcObject) {
        const track = video.srcObject.getVideoTracks()[0];
        if (track) {
          const settings = track.getSettings();
          if (settings.width && settings.height) {
            const aspectRatio = settings.height / settings.width;
            videoContainer.style.height = `${videoContainer.clientWidth * aspectRatio}px`;
          }
        }
      }
    });
  </script>

</body>
</html>
